NY_region_palette.df <- NY_counties_regions %>%
dplyr::select(Region,Color) %>%
dplyr::distinct(Region,Color)
NY_region_palette <- setNames(as.character(NY_region_palette.df$Color), as.character(NY_region_palette.df$Region))
covid_NY_TS_plot.deaths %>%
group_by(Region, date) %>%
summarise(p_diff = sum(p_diff)) %>%
mutate(ma = c(numeric(6),rollmean(p_diff, 7, align = "right"))) %>%
filter(ma > 0) %>%
ggplot(aes(date,
ma,
color = Region)) +
scale_color_manual(values=NY_region_palette) +
geom_line(size = 1) +
scale_y_continuous(
trans = "log10",
breaks = c(10,100,500,1000,5000,10000,50000)
) +
scale_x_datetime(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
ylab("New cases per 100k") +
xlab("Date") +
ggtitle("New York State NEW COVID-19 deaths per 100k") +
geom_vline(aes(xintercept=as_datetime("2020-03-20"), linetype="Gov. Cuomo issues stay-at-home order"), color = "black") +
scale_linetype_manual(name = "Events",
values = c(2),
guide = guide_legend(override.aes = list(color = c("black")))) +
NULL
# rollmean from zoo::rollmean
NY_region_palette.df <- NY_counties_regions %>%
dplyr::select(Region,Color) %>%
dplyr::distinct(Region,Color)
NY_region_palette <- setNames(as.character(NY_region_palette.df$Color), as.character(NY_region_palette.df$Region))
covid_NY_TS_plot.deaths %>%
group_by(Region, date) %>%
summarise(p_diff = sum(p_diff)) %>%
mutate(ma = c(numeric(6),rollmean(p_diff, 7, align = "right"))) %>%
filter(ma > 0) %>%
ggplot(aes(date,
ma,
color = Region)) +
scale_color_manual(values=NY_region_palette) +
geom_line(size = 1) +
#scale_y_continuous(
#  trans = "log10",
#  breaks = c(10,100,500,1000,5000,10000,50000)
#) +
scale_x_datetime(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
ylab("New cases per 100k") +
xlab("Date") +
ggtitle("New York State NEW COVID-19 deaths per 100k") +
geom_vline(aes(xintercept=as_datetime("2020-03-20"), linetype="Gov. Cuomo issues stay-at-home order"), color = "black") +
geom_vline(aes(xintercept=as_datetime("2020-05-15"), linetype="Gov. Cuomo issues Phase 1 Reopening (5 Regions)"), color = "blue") +
scale_linetype_manual(name = "Events",
values = c(2,2),
guide = guide_legend(override.aes = list(color = c("blue","black")))) +
NULL
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
#### Library and Data Imports ####
## Load essential R packages
source("modules/Source.R")
## Load stored data (see `data` subdirectory)
source("modules/data_load.R")
## Create dataframes; perform desparity index calcuations; prep for plotting
source("modules/preprocessing.R")
pal2 <- leaflet::colorBin(colors, domain = NY.data$death_rate_ldi, bins = bins, reverse=FALSE)
colors <- c("#253494","#4575B4", "#74ADD1","#ABD9E9","#f7f7f7","#FDAE61","#F46D43", "#D73027", "#BD0026")
bins <- c(5, 3, 2, 1, .2, -.2, -1, -2, -3, -5)
pal2 <- leaflet::colorBin(colors, domain = NY.data$death_rate_ldi, bins = bins, reverse=FALSE)
labels <- sprintf(
"<strong>%s</strong><br/>
COVID-19 Mortality Rate DI: %.2g<br>
COVID-19 Mortality Rate: %.1f /100k",
NY.data$County, NY.data$death_rate_ldi, (NY.data$deaths/NY.data$Population)*100000
) %>% lapply(htmltools::HTML)
leaflet(NY.shape) %>%
setView(-76.071782, 42.991989, 6) %>%  # Set to the geographic center of NY
addPolygons(
fillColor = ~pal2(NY.data$death_rate_ldi),
weight = 1,
opacity = 1,
color = "#330000",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal2,
values = ~NY.data$death_rate_ldi,
opacity = 0.7,
title = "Disparity Index<br/>NY COVID-19 Mortality Rates",
position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
#Remove personal API key
View(NY.data)
View(NY.shape)
read_csv("data/csv/time_series/covid_confirmed_usafacts.csv")
read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
group_by(State) %>%
filter(countyFIPS > 1000)
update_date <- "5/28/20"
read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
group_by(State) %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date)
todays.case.data <- read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
group_by(State) %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date)
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv")
View(todays.case.data)
View(population)
read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
inner_join(todays.case.data, population, by=c("countyFIPS == countyFIPS"))
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
group_by(State) %>%
filter(countyFIPS > 1000)
todays.case.data <- inner_join(todays.case.data, population, by=c("countyFIPS == countyFIPS"))
todays.case.data <- read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date)
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
todays.case.data <- inner_join(todays.case.data, population, by=c("countyFIPS == countyFIPS"))
dplyr::inner_join(todays.case.data, population, by=c("countyFIPS == countyFIPS"))
dplyr::inner_join(todays.case.data, population, by=c("countyFIPS" == "countyFIPS"))
inner_join(todays.case.data, population, by=c("countyFIPS" = "countyFIPS"))
inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS"))
todays.case.data <- inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS"))
read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date) %>%
rename(update_date == "Cases")
read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date) %>%
rename(update_date = "Cases")
?rename
read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date) %>%
rename(c(update_date = "Cases"))
read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date) %>%
rename(c("Cases" = update_date))
read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date) %>%
rename(c("Cases" = update_date, "County" = "County Name"))
todays.case.data <- read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date) %>%
rename(c("Cases" = update_date, "County" = "County Name"))
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
todays.case.data <- inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS"))
todays.case.data$date <- update_date
todays.case.data$p_cases <- todays.case.data$Cases/todays.case.data$population * 100000
todays.case.data$case_rate_ldi <- unlist(lapply(todays.case.data$p_cases, FUN=function(x){-log(pUS.6.cases/x)}))
unlist(lapply(todays.case.data$p_cases, FUN=function(x){-log(pUS.6.cases/x)})) %>%
mutate(case_rate_ldi = replace(case_rate_ldi, case_rate_ldi < -5, -5))
todays.case.data <- todays.case.data %>%
mutate(case_rate_ldi = replace(case_rate_ldi, case_rate_ldi < -5, -5))
inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS")) %>%
filter(population > 0)
todays.case.data <- read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date) %>%
rename(c("Cases" = update_date, "County" = "County Name"))
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
todays.case.data <- inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS")) %>%
filter(population > 0)
todays.case.data$date <- update_date
todays.case.data$p_cases <- todays.case.data$Cases/todays.case.data$population * 100000
todays.case.data$case_rate_ldi <- unlist(lapply(todays.case.data$p_cases, FUN=function(x){-log(pUS.6.cases/x)}))
todays.case.data <- todays.case.data %>%
mutate(case_rate_ldi = replace(case_rate_ldi, case_rate_ldi < -5, -5))
pUS.6.cases
todays.case.data <- read_csv("data/csv/time_series/covid_confirmed_usafacts.csv") %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, update_date) %>%
rename(c("Cases" = update_date, "County" = "County Name"))
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
todays.case.data <- inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS")) %>%
filter(population > 0)
todays.case.data$date <- update_date
todays.case.data$case_rate <- todays.case.data$Cases/todays.case.data$population
todays.case.data$case_rate_ldi <- unlist(lapply(todays.case.data$case_rate, FUN=function(x){-log(pUS.6.cases/x)}))
todays.case.data <- todays.case.data %>%
mutate(case_rate_ldi = replace(case_rate_ldi, case_rate_ldi < -5, -5))
View(NY.data)
selected_county <- "NY"
todays.case.data <- todays.case.data %>%
mutate(County = str_remove_all(County, regex(" County", ignore_case = T)))
View(NY.data)
View(NY.shape)
geo.plot <- function(state.choice) {
dataset <- todays.case.data %>%
filter(State == state.choice)
shapes <- readRDS(paste("data/shape_files/", state.choice, ".Rds", sep = ""))
# Join moved to processing
shapes$countyFIPS <- paste(as.data.frame(shapes)$STATEFP, as.data.frame(shape)$COUNTYFP, sep = '')
dataset <- dplyr::left_join(as.data.frame(shapes), as.data.frame(dataset), by = c("countyFIPS" = "countyFIPS"))
pal2 <- leaflet::colorBin(colors, domain = NY.data$death_rate_ldi, bins = bins, reverse=FALSE)
labels <- sprintf(
"<strong>%s</strong><br/>
COVID-19 Mortality Rate DI: %.2g<br>
COVID-19 Mortality Rate: %.1f /100k",
dataset$County, dataset$case_rate_ldi, (dataset$case_rate)*100000
) %>% lapply(htmltools::HTML)
dataset <- dataset %>% dplyr::distinct(county_name, county_fips, VAR_)
shapes.data <- as.data.frame(shapes)
shapes.data$county_fips <- paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = '')
dataset <- left_join(shapes.data, dataset, by = c("county_fips" = "county_fips", "name" = "County"))
return (leaflet(shapes) %>%
setView(-76.071782, 42.991989, 6) %>%  # Set to the geographic center of NY
addPolygons(
fillColor = ~pal2(dataset$case_rate_ldi),
weight = 1,
opacity = 1,
color = "#330000",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal2,
values = ~dataset$case_rate_ldi,
opacity = 0.7,
title = paste0("Disparity Index<br/>",state.choice," COVID-19 Case Rates"),
position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
)
}
selected_state <- "NY"
geo.plot(selected_state)
geo.plot <- function(state.choice) {
dataset <- todays.case.data %>%
filter(State == state.choice)
shapes <- readRDS(paste("data/shape_files/", state.choice, ".Rds", sep = ""))
# Join moved to processing
shapes$countyFIPS <- paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = '')
dataset <- dplyr::left_join(as.data.frame(shapes), as.data.frame(dataset), by = c("countyFIPS" = "countyFIPS"))
pal2 <- leaflet::colorBin(colors, domain = NY.data$death_rate_ldi, bins = bins, reverse=FALSE)
labels <- sprintf(
"<strong>%s</strong><br/>
COVID-19 Mortality Rate DI: %.2g<br>
COVID-19 Mortality Rate: %.1f /100k",
dataset$County, dataset$case_rate_ldi, (dataset$case_rate)*100000
) %>% lapply(htmltools::HTML)
dataset <- dataset %>% dplyr::distinct(county_name, county_fips, VAR_)
shapes.data <- as.data.frame(shapes)
shapes.data$county_fips <- paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = '')
dataset <- left_join(shapes.data, dataset, by = c("county_fips" = "county_fips", "name" = "County"))
return (leaflet(shapes) %>%
setView(-76.071782, 42.991989, 6) %>%  # Set to the geographic center of NY
addPolygons(
fillColor = ~pal2(dataset$case_rate_ldi),
weight = 1,
opacity = 1,
color = "#330000",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal2,
values = ~dataset$case_rate_ldi,
opacity = 0.7,
title = paste0("Disparity Index<br/>",state.choice," COVID-19 Case Rates"),
position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
)
}
selected_state <- "NY"
geo.plot(selected_state)
as.numeric("123")
geo.plot <- function(state.choice) {
dataset <- todays.case.data %>%
filter(State == state.choice)
shapes <- readRDS(paste("data/shape_files/", state.choice, ".Rds", sep = ""))
# Join moved to processing
shapes$countyFIPS <- as.numeric(paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = ''))
dataset <- dplyr::left_join(as.data.frame(shapes), as.data.frame(dataset), by = c("countyFIPS" = "countyFIPS"))
pal2 <- leaflet::colorBin(colors, domain = NY.data$death_rate_ldi, bins = bins, reverse=FALSE)
labels <- sprintf(
"<strong>%s</strong><br/>
COVID-19 Mortality Rate DI: %.2g<br>
COVID-19 Mortality Rate: %.1f /100k",
dataset$County, dataset$case_rate_ldi, (dataset$case_rate)*100000
) %>% lapply(htmltools::HTML)
dataset <- dataset %>% dplyr::distinct(county_name, county_fips, VAR_)
shapes.data <- as.data.frame(shapes)
shapes.data$county_fips <- paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = '')
dataset <- left_join(shapes.data, dataset, by = c("county_fips" = "county_fips", "name" = "County"))
return (leaflet(shapes) %>%
setView(-76.071782, 42.991989, 6) %>%  # Set to the geographic center of NY
addPolygons(
fillColor = ~pal2(dataset$case_rate_ldi),
weight = 1,
opacity = 1,
color = "#330000",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal2,
values = ~dataset$case_rate_ldi,
opacity = 0.7,
title = paste0("Disparity Index<br/>",state.choice," COVID-19 Case Rates"),
position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
)
}
selected_state <- "NY"
geo.plot(selected_state)
geo.plot <- function(state.choice) {
dataset <- todays.case.data %>%
filter(State == state.choice)
shapes <- readRDS(paste("data/shape_files/", state.choice, ".Rds", sep = ""))
# Join moved to processing
shapes$countyFIPS <- as.numeric(paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = ''))
dataset <- dplyr::left_join(as.data.frame(shapes), as.data.frame(dataset), by = c("countyFIPS" = "countyFIPS"))
pal2 <- leaflet::colorBin(colors, domain = NY.data$death_rate_ldi, bins = bins, reverse=FALSE)
labels <- sprintf(
"<strong>%s</strong><br/>
COVID-19 Mortality Rate DI: %.2g<br>
COVID-19 Mortality Rate: %.1f /100k",
dataset$County, dataset$case_rate_ldi, (dataset$case_rate)*100000
) %>% lapply(htmltools::HTML)
return (leaflet(shapes) %>%
setView(-76.071782, 42.991989, 6) %>%  # Set to the geographic center of NY
addPolygons(
fillColor = ~pal2(dataset$case_rate_ldi),
weight = 1,
opacity = 1,
color = "#330000",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal2,
values = ~dataset$case_rate_ldi,
opacity = 0.7,
title = paste0("Disparity Index<br/>",state.choice," COVID-19 Case Rates"),
position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
)
}
selected_state <- "NY"
geo.plot(selected_state)
geo.plot <- function(state.choice) {
dataset <- todays.case.data %>%
filter(State == state.choice)
shapes <- readRDS(paste("data/shape_files/", state.choice, ".Rds", sep = ""))
# Join moved to processing
shapes$countyFIPS <- as.numeric(paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = ''))
dataset <- dplyr::left_join(as.data.frame(shapes), as.data.frame(dataset), by = c("countyFIPS" = "countyFIPS"))
pal2 <- leaflet::colorBin(colors, domain = NY.data$death_rate_ldi, bins = bins, reverse=FALSE)
labels <- sprintf(
"<strong>%s</strong><br/>
COVID-19 Mortality Rate DI: %.2g<br>
COVID-19 Mortality Rate: %.1f /100k",
dataset$County, dataset$case_rate_ldi, (dataset$case_rate)*100000
) %>% lapply(htmltools::HTML)
return (leaflet(shapes) %>%
#setView(-76.071782, 42.991989, 6) %>%  # Set to the geographic center of NY
addPolygons(
fillColor = ~pal2(dataset$case_rate_ldi),
weight = 1,
opacity = 1,
color = "#330000",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal2,
values = ~dataset$case_rate_ldi,
opacity = 0.7,
title = paste0("Disparity Index<br/>",state.choice," COVID-19 Case Rates"),
position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
)
}
selected_state <- "NY"
geo.plot(selected_state)
selected_state <- "AL"
geo.plot(selected_state)
selected_state <- "HI"
geo.plot(selected_state)
selected_state <- "CA"
geo.plot(selected_state)
selected_state <- "TN"
geo.plot(selected_state)
selected_state <- "UT"
geo.plot(selected_state)
selected_state <- "NJ"
geo.plot(selected_state)
selected_state <- "FL"
geo.plot(selected_state)
