position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
)
}
selected_state <- "MA"
selected_feature <- "Case"
geo.plot(selected_state, selected_feature)
selected_state <- "MA"
selected_feature <- "Case"
geo.plot(selected_state, selected_feature, T)
selected_state <- "MA"
selected_feature <- "Case"
geo.plot(selected_state, selected_feature)
selected_state <- "MA"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
#### Library and Data Imports ####
## Load essential R packages
source("modules/Source.R")
## Load stored data (see `data` subdirectory)
source("modules/data_load.R")
## Create dataframes; perform desparity index calcuations; prep for plotting
source("modules/preprocessing.R")
# PROCESSING
# Take care of this on downloader script.
covid_NY_TS_counties_long.deaths <- read_csv("data/csv/time_series/covid_NY_TS_counties_long.deaths.csv")
covid_NY_TS_counties_long.deaths <- covid_NY_TS_counties_long.deaths %>%
dplyr::filter(deaths > 0)%>%
dplyr::filter(County != "Unassigned")
covid_NY_TS_plot.deaths <- covid_NY_TS_counties_long.deaths %>%
dplyr::group_by(date)
covid_NY_TS_plot.deaths$log_deaths <- log10(covid_NY_TS_plot.deaths$deaths)
NY_population <- read_csv("data/csv/time_series/NY_population.csv")
covid_NY_TS_plot.deaths <- dplyr::inner_join(covid_NY_TS_plot.deaths, as.data.frame(NY_population), by = c("County" = "County"))
covid_NY_TS_plot.deaths <- covid_NY_TS_plot.deaths %>%
dplyr::select(-FIPS)
# Append death rates per county!
covid_NY_TS_plot.deaths <- covid_NY_TS_plot.deaths %>%
dplyr::mutate(p_deaths = (deaths/Population)*100000) %>%
dplyr::mutate(log_p_deaths = log10(p_deaths))
# Regions for plots
NY_counties_regions <- read_csv("data/csv/time_series/NY_counties_regions.csv")
covid_NY_TS_plot.deaths <- dplyr::inner_join(covid_NY_TS_plot.deaths, as.data.frame(NY_counties_regions), by = c("County" = "County"))
# make sure we have the same version for our app plot!
write_csv(covid_NY_TS_plot.deaths, "data/csv/time_series/covid_NY_TS_plot.deaths.csv")
# Take care of this in preprocessing
# Creates difference in deaths from previous recorded date. First date is equal to deaths reported
covid_NY_TS_plot.deaths %>% group_by(County) %>%
mutate(diff = ifelse(as.Date(date - 1) == lag(date), deaths - lag(deaths), deaths)) ->
covid_NY_TS_plot.deaths
covid_NY_TS_plot.deaths %>%
mutate(p_diff = ifelse(as.Date(date - 1) == lag(date), p_deaths - lag(p_deaths), p_deaths)) %>%
ungroup() -> covid_NY_TS_plot.deaths
covid_NY_TS_plot.deaths$diff <- ifelse(is.na(covid_NY_TS_plot.deaths$diff), covid_NY_TS_plot.deaths$deaths, covid_NY_TS_plot.deaths$diff)
covid_NY_TS_plot.deaths$p_diff <- ifelse(is.na(covid_NY_TS_plot.deaths$p_diff), covid_NY_TS_plot.deaths$p_deaths, covid_NY_TS_plot.deaths$p_diff)
# RAW DEATH TOTALS
NY_region_palette.df <- NY_counties_regions %>%
dplyr::select(Region,Color) %>%
dplyr::distinct(Region,Color)
NY_region_palette <- setNames(as.character(NY_region_palette.df$Color), as.character(NY_region_palette.df$Region))
NYC <- covid_NY_TS_plot.deaths %>%
filter(Region == "New York City") %>%
group_by(Region, Color, date) %>%
summarise(deaths = sum(deaths),
Population = sum(Population),
p_deaths = mean(p_deaths),
diff = sum(diff),
p_diff = mean(p_diff),
log_deaths = sum(log_deaths),
log_p_deaths = mean(log_p_deaths)) %>%
mutate(County = "New York City")
covid_NY_TS_plot.deaths <- covid_NY_TS_plot.deaths %>%
filter(Region != "New York City") %>%
rbind.data.frame(NYC)
labels = covid_NY_TS_plot.deaths %>% group_by(County) %>% summarise_all(max) %>% filter(deaths > 10)
covid_NY_TS_plot.deaths %>%
filter(deaths > 10) %>%
ggplot(aes(date,
deaths,
color = Region,
group = County)) +
scale_color_manual(values=NY_region_palette) +
geom_line(size = 1) +
geom_label(
data = labels,
aes(label = County, x=date, y=deaths),
box.padding = unit(1.75, 'lines')) +
scale_y_continuous(
trans = "log10",
breaks = c(10,100,500,1000,5000,10000, 50000)
) +
scale_x_datetime(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
coord_cartesian(expand = TRUE) +
ylab("Deaths") +
xlab("Date") +
ggtitle("New York State COVID-19 deaths over time") +
geom_vline(aes(xintercept=as_datetime("2020-03-20"), linetype="Gov. Cuomo issues stay-at-home order"), color = "black") +
geom_vline(aes(xintercept=as_datetime("2020-05-15"), linetype="Gov. Cuomo issues Phase 1 Reopening (5 Regions)"), color = "blue") +
scale_linetype_manual(name = "Events",
values = c(2,2),
guide = guide_legend(override.aes = list(color = c("blue","black")))) +
NULL
# DEATHS PER 100k
NY_region_palette.df <- NY_counties_regions %>%
dplyr::select(Region,Color) %>%
dplyr::distinct(Region,Color)
NY_region_palette <- setNames(as.character(NY_region_palette.df$Color), as.character(NY_region_palette.df$Region))
labels = covid_NY_TS_plot.deaths %>% group_by(County) %>% summarise_all(max) %>% filter(p_deaths > 5)
covid_NY_TS_plot.deaths %>%
filter(p_deaths > 5) %>%
ggplot(aes(date,
p_deaths,
color = Region,
group = County)) +
scale_color_manual(values=NY_region_palette) +
geom_line(size = 1) +
geom_label(
data = labels,
aes(label = County, x=date, y=p_deaths)) +
scale_y_continuous(
trans = "log10",
breaks = c(10,100,500,1000,5000,10000, 50000)
) +
scale_x_datetime(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
coord_cartesian(expand = TRUE) +
ylab("Deaths/100k") +
xlab("Date") +
ggtitle("New York State COVID-19 deaths rate over time") +
geom_vline(aes(xintercept=as_datetime("2020-03-20"), linetype="Gov. Cuomo issues stay-at-home order"), color = "black") +
geom_vline(aes(xintercept=as_datetime("2020-05-15"), linetype="Gov. Cuomo issues Phase 1 Reopening (5 Regions)"), color = "blue") +
scale_linetype_manual(name = "Events",
values = c(2,2),
guide = guide_legend(override.aes = list(color = c("blue","black")))) +
NULL
# RAW DEATH TOTALS
NY_region_palette.df <- NY_counties_regions %>%
dplyr::select(Region,Color) %>%
dplyr::distinct(Region,Color)
NY_region_palette <- setNames(as.character(NY_region_palette.df$Color), as.character(NY_region_palette.df$Region))
NYC <- covid_NY_TS_plot.deaths %>%
filter(Region == "New York City") %>%
group_by(Region, Color, date) %>%
summarise(deaths = sum(deaths),
Population = sum(Population),
p_deaths = mean(p_deaths),
diff = sum(diff),
p_diff = mean(p_diff),
log_deaths = sum(log_deaths),
log_p_deaths = mean(log_p_deaths)) %>%
mutate(County = "New York City")
covid_NY_TS_plot.deaths <- covid_NY_TS_plot.deaths %>%
filter(Region != "New York City") %>%
rbind.data.frame(NYC)
labels = covid_NY_TS_plot.deaths %>% group_by(County) %>% summarise_all(max) %>% filter(deaths > 10)
covid_NY_TS_plot.deaths %>%
filter(deaths > 10) %>%
ggplot(aes(date,
deaths,
color = Region,
group = County)) +
scale_color_manual(values=NY_region_palette) +
geom_line(size = 1) +
geom_label(
data = labels,
aes(label = County, x=date, y=deaths)) +
scale_y_continuous(
trans = "log10",
breaks = c(10,100,500,1000,5000,10000, 50000)
) +
scale_x_datetime(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
coord_cartesian(expand = TRUE) +
ylab("Deaths") +
xlab("Date") +
ggtitle("New York State COVID-19 deaths over time") +
geom_vline(aes(xintercept=as_datetime("2020-03-20"), linetype="Gov. Cuomo issues stay-at-home order"), color = "black") +
geom_vline(aes(xintercept=as_datetime("2020-05-15"), linetype="Gov. Cuomo issues Phase 1 Reopening (5 Regions)"), color = "blue") +
scale_linetype_manual(name = "Events",
values = c(2,2),
guide = guide_legend(override.aes = list(color = c("blue","black")))) +
NULL
# DEATHS PER 100k
NY_region_palette.df <- NY_counties_regions %>%
dplyr::select(Region,Color) %>%
dplyr::distinct(Region,Color)
NY_region_palette <- setNames(as.character(NY_region_palette.df$Color), as.character(NY_region_palette.df$Region))
labels = covid_NY_TS_plot.deaths %>% group_by(County) %>% summarise_all(max) %>% filter(p_deaths > 5)
covid_NY_TS_plot.deaths %>%
filter(p_deaths > 5) %>%
ggplot(aes(date,
p_deaths,
color = Region,
group = County)) +
scale_color_manual(values=NY_region_palette) +
geom_line(size = 1) +
geom_label(
data = labels,
aes(label = County, x=date, y=p_deaths)) +
scale_y_continuous(
trans = "log10",
breaks = c(10,100,500,1000,5000,10000, 50000)
) +
scale_x_datetime(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
coord_cartesian(expand = TRUE) +
ylab("Deaths/100k") +
xlab("Date") +
ggtitle("New York State COVID-19 deaths rate over time") +
geom_vline(aes(xintercept=as_datetime("2020-03-20"), linetype="Gov. Cuomo issues stay-at-home order"), color = "black") +
geom_vline(aes(xintercept=as_datetime("2020-05-15"), linetype="Gov. Cuomo issues Phase 1 Reopening (5 Regions)"), color = "blue") +
scale_linetype_manual(name = "Events",
values = c(2,2),
guide = guide_legend(override.aes = list(color = c("blue","black")))) +
NULL
# DEATHS PER 100k
NY_region_palette.df <- NY_counties_regions %>%
dplyr::select(Region,Color) %>%
dplyr::distinct(Region,Color)
NY_region_palette <- setNames(as.character(NY_region_palette.df$Color), as.character(NY_region_palette.df$Region))
labels = covid_NY_TS_plot.deaths %>% group_by(County) %>% summarise_all(max) %>% filter(p_deaths > 5)
covid_NY_TS_plot.deaths %>%
filter(p_deaths > 5) %>%
ggplot(aes(date,
p_deaths,
color = Region,
group = County)) +
scale_color_manual(values=NY_region_palette) +
geom_line(size = 1) +
geom_label(
data = labels,
aes(label = County, x=date, y=p_deaths)) +
scale_y_continuous(
trans = "log10",
breaks = c(10,100,500,1000,5000,10000, 50000)
) +
scale_x_datetime(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
coord_cartesian(expand = TRUE) +
ylab("Deaths/100k") +
xlab("Date") +
ggtitle("New York State COVID-19 deaths rate over time") +
geom_vline(aes(xintercept=as_datetime("2020-03-20"), linetype="Gov. Cuomo issues stay-at-home order"), color = "black") +
geom_vline(aes(xintercept=as_datetime("2020-05-15"), linetype="Gov. Cuomo issues Phase 1 Reopening (5 Regions)"), color = "blue") +
scale_linetype_manual(name = "Events",
values = c(2,2),
guide = guide_legend(override.aes = list(color = c("blue","black")))) +
NULL
selected_state <- "CA"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
selected_state <- "CA"
selected_feature <- "Case"
geo.plot(selected_state, selected_feature)
selected_state <- "MI"
selected_feature <- "Case"
geo.plot(selected_state, selected_feature)
#update_date <- "06/02/20"
todays.case.data <- read_csv("data/csv/time_series/covid_confirmed_usafacts.csv")
todays.case.data <- todays.case.data %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, ncol(todays.case.data)) %>%
rename(c("County" = "County Name"))
colnames(todays.case.data)[4] <- "Cases"
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
todays.case.data <- inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS")) %>%
filter(population > 0)
todays.death.data <- read_csv("data/csv/time_series/covid_deaths_usafacts.csv")
todays.death.data <- todays.death.data %>%
filter(countyFIPS > 1000) %>%
select(1, ncol(todays.death.data))
colnames(todays.death.data)[2] <- "Mortality"
todays.case.data <- inner_join(todays.case.data, todays.death.data, by=c("countyFIPS" = "countyFIPS"))
#todays.case.data$date <- update_date
todays.case.data$Case_rate <- todays.case.data$Cases/todays.case.data$population
todays.case.data$Case_rate_ldi <- unlist(lapply(todays.case.data$Case_rate, FUN=function(x){-log(pUS.6.cases/x)}))
todays.case.data <- todays.case.data %>%
mutate(Case_rate_ldi = replace(Case_rate_ldi, Case_rate_ldi < -5, -5))
todays.case.data$Mortality_rate <- todays.case.data$Mortality/todays.case.data$population
todays.case.data$Mortality_rate_ldi <- unlist(lapply(todays.case.data$Mortality_rate, FUN=function(x){-log(pUS.6.deaths/x)}))
todays.case.data <- todays.case.data %>%
mutate(Mortality_rate_ldi = replace(Mortality_rate_ldi, Mortality_rate_ldi < -5, -5))
todays.case.data <- todays.case.data %>%
mutate(County = str_remove_all(County, regex(" County", ignore_case = T)))
selected_state <- "MI"
selected_feature <- "Case"
geo.plot(selected_state, selected_feature)
selected_state <- "MI"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
selected_state <- "GA"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
selected_state <- "SD"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
View(todays.case.data)
selected_state <- "NY"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
#### Library and Data Imports ####
## Load essential R packages
source("modules/Source.R")
## Load stored data (see `data` subdirectory)
source("modules/data_load.R")
## Create dataframes; perform desparity index calcuations; prep for plotting
source("modules/preprocessing.R")
colors <- c("#253494","#4575B4", "#74ADD1","#ABD9E9","#f7f7f7","#FDAE61","#F46D43", "#D73027", "#BD0026")
bins <- c(5, 3, 2, 1, .2, -.2, -1, -2, -3, -5)
get_ldi <- function(feature) {
rate <- paste0(feature,"_rate")
ldi <- paste0(rate, "_ldi")
return(c(ldi, rate))
}
geo.plot <- function(state.choice, feature, reverse=F) {
# Feature: Case, Mortality...
ldi_feature <- get_ldi(feature)
dataset <- todays.case.data %>%
filter(State == state.choice)
shapes <- readRDS(paste("data/shape_files/", state.choice, ".Rds", sep = ""))
shapes$countyFIPS <- as.numeric(paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = ''))
dataset <- dplyr::left_join(as.data.frame(shapes), as.data.frame(dataset), by = c("countyFIPS" = "countyFIPS"))
pal2 <- leaflet::colorBin(colors, domain = dataset[,ldi_feature[1]], bins = bins, reverse=reverse)
labels <- sprintf(
paste0("<strong>%s</strong><br/>
COVID-19 ",feature," Rate DI: %.2g<br>
COVID-19 ",feature," Rate: %.1f /100k"),
dataset$County, dataset[,ldi_feature[1]], (dataset[,ldi_feature[2]])*100000
) %>% lapply(htmltools::HTML)
return (leaflet(shapes) %>%
addPolygons(
fillColor = ~pal2(dataset[,ldi_feature[1]]),
weight = 1,
opacity = 1,
color = "#330000",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal2,
values = ~dataset[ldi_feature[1]],
opacity = 0.7,
title = paste0("Disparity Index<br/>",state.choice," COVID-19 ",feature," Rates"),
position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
)
}
todays.case.data <- read_csv("data/csv/time_series/covid_confirmed_usafacts.csv")
todays.case.data <- todays.case.data %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, ncol(todays.case.data)) %>%
rename(c("County" = "County Name"))
colnames(todays.case.data)[4] <- "Cases"
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
todays.case.data <- inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS")) %>%
filter(population > 0)
todays.death.data <- read_csv("data/csv/time_series/covid_deaths_usafacts.csv")
todays.death.data <- todays.death.data %>%
filter(countyFIPS > 1000) %>%
select(1, ncol(todays.death.data))
colnames(todays.death.data)[2] <- "Mortality"
todays.case.data <- inner_join(todays.case.data, todays.death.data, by=c("countyFIPS" = "countyFIPS"))
todays.case.data$Case_rate <- todays.case.data$Cases/todays.case.data$population
todays.case.data$Case_rate_ldi <- unlist(lapply(todays.case.data$Case_rate, FUN=function(x){-log(pUS.6.cases/x)}))
todays.case.data <- todays.case.data %>%
mutate(Case_rate_ldi = replace(Case_rate_ldi, Case_rate_ldi < -5, -5))
todays.case.data$Mortality_rate <- todays.case.data$Mortality/todays.case.data$population
todays.case.data$Mortality_rate_ldi <- unlist(lapply(todays.case.data$Mortality_rate, FUN=function(x){-log(pUS.6.deaths/x)}))
todays.case.data <- todays.case.data %>%
mutate(Mortality_rate_ldi = replace(Mortality_rate_ldi, Mortality_rate_ldi < -5, -5))
todays.case.data <- todays.case.data %>%
mutate(County = str_remove_all(County, regex(" County", ignore_case = T)))
selected_state <- "NK"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
selected_state <- "AK"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
selected_state <- "NY"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
#### Library and Data Imports ####
## Load essential R packages
source("modules/Source.R")
## Load stored data (see `data` subdirectory)
source("modules/data_load.R")
## Create dataframes; perform desparity index calcuations; prep for plotting
source("modules/preprocessing.R")
colors <- c("#253494","#4575B4", "#74ADD1","#ABD9E9","#f7f7f7","#FDAE61","#F46D43", "#D73027", "#BD0026")
bins <- c(5, 3, 2, 1, .2, -.2, -1, -2, -3, -5)
get_ldi <- function(feature) {
rate <- paste0(feature,"_rate")
ldi <- paste0(rate, "_ldi")
return(c(ldi, rate))
}
geo.plot <- function(state.choice, feature, reverse=F) {
# Feature: Case, Mortality...
ldi_feature <- get_ldi(feature)
dataset <- todays.case.data %>%
filter(State == state.choice)
shapes <- readRDS(paste("data/shape_files/", state.choice, ".Rds", sep = ""))
shapes$countyFIPS <- as.numeric(paste(as.data.frame(shapes)$STATEFP, as.data.frame(shapes)$COUNTYFP, sep = ''))
dataset <- dplyr::left_join(as.data.frame(shapes), as.data.frame(dataset), by = c("countyFIPS" = "countyFIPS"))
pal2 <- leaflet::colorBin(colors, domain = dataset[,ldi_feature[1]], bins = bins, reverse=reverse)
labels <- sprintf(
paste0("<strong>%s</strong><br/>
COVID-19 ",feature," Rate DI: %.2g<br>
COVID-19 ",feature," Rate: %.1f /100k"),
dataset$County, dataset[,ldi_feature[1]], (dataset[,ldi_feature[2]])*100000
) %>% lapply(htmltools::HTML)
return (leaflet(shapes) %>%
addPolygons(
fillColor = ~pal2(dataset[,ldi_feature[1]]),
weight = 1,
opacity = 1,
color = "#330000",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal2,
values = ~dataset[ldi_feature[1]],
opacity = 0.7,
title = paste0("Disparity Index<br/>",state.choice," COVID-19 ",feature," Rates"),
position = "bottomright",
labFormat = function(type, cuts, p) { n = length(cuts)
cuts[n] = paste0(cuts[n]," lower")
# for (i in c(1,seq(3,(n-1)))){cuts[i] = paste0(cuts[i],"—")}
for (i in c(1,seq(2,(n-1)))){cuts[i] = paste0(cuts[i]," — ")}
cuts[2] = paste0(cuts[2]," higher")
paste0(str_remove(cuts[-n],"higher"), str_remove(cuts[-1],"—"))
}
) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light"))
)
}
todays.case.data <- read_csv("data/csv/time_series/covid_confirmed_usafacts.csv")
todays.case.data <- todays.case.data %>%
filter(countyFIPS > 1000) %>%
select(countyFIPS, `County Name`, State, ncol(todays.case.data)) %>%
rename(c("County" = "County Name"))
colnames(todays.case.data)[4] <- "Cases"
population <- read_csv("data/csv/time_series/covid_county_population_usafacts.csv") %>%
filter(countyFIPS > 1000)
todays.case.data <- inner_join(todays.case.data, population[c(1,4)], by=c("countyFIPS" = "countyFIPS")) %>%
filter(population > 0)
todays.death.data <- read_csv("data/csv/time_series/covid_deaths_usafacts.csv")
todays.death.data <- todays.death.data %>%
filter(countyFIPS > 1000) %>%
select(1, ncol(todays.death.data))
colnames(todays.death.data)[2] <- "Mortality"
todays.case.data <- inner_join(todays.case.data, todays.death.data, by=c("countyFIPS" = "countyFIPS"))
todays.case.data$Case_rate <- todays.case.data$Cases/todays.case.data$population
todays.case.data$Case_rate_ldi <- unlist(lapply(todays.case.data$Case_rate, FUN=function(x){-log(pUS.6.cases/x)}))
todays.case.data <- todays.case.data %>%
mutate(Case_rate_ldi = replace(Case_rate_ldi, Case_rate_ldi < -5, -5))
todays.case.data$Mortality_rate <- todays.case.data$Mortality/todays.case.data$population
todays.case.data$Mortality_rate_ldi <- unlist(lapply(todays.case.data$Mortality_rate, FUN=function(x){-log(pUS.6.deaths/x)}))
todays.case.data <- todays.case.data %>%
mutate(Mortality_rate_ldi = replace(Mortality_rate_ldi, Mortality_rate_ldi < -5, -5))
todays.case.data <- todays.case.data %>%
mutate(County = str_remove_all(County, regex(" County", ignore_case = T)))
selected_state <- "NY"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
selected_state <- "AK"
selected_feature <- "Mortality"
geo.plot(selected_state, selected_feature)
runApp('~/Documents/covid')
runApp('~/Documents/covid')
