colnames(mask)[2] = "state"
colnames(mask)[4] = "mask"
# merging data
state_test = merge(state_test,statecode[,c(1,3)],by.x = "state" ,by.y = "Code" )
state_test = merge(state_test,distancing[,c(2,4)],by = "state")
state_test = merge(state_test,reopen[,c(2,4)],by = "state")
state_test = merge(state_test,closure[,c(2,4)],by = "state")
state_test = merge(state_test,mask[,c(2,4)],by = "state")
#state_test$date_since_social = as.numeric(as.Date(Sys.Date()) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test$date_since_social = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_social)==T,]$date_since_social = 0
state_test$date_since_social[state_test$date_since_social < 0] = 0
state_test$date_since_reopen = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reopen, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reopen)==T,]$date_since_reopen = 0
state_test$date_since_reopen[state_test$date_since_reopen < 0] = 0
state_test$date_since_reclosure = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reclosure, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reclosure)==T,]$date_since_reclosure = 0
state_test$date_since_reclosure[state_test$date_since_reclosure < 0] = 0
state_test$date_since_mask = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$mask, "%m/%d/%Y"))))
state_test$date_since_mask[is.na(state_test$date_since_mask)==T] = 0
state_test$date_since_mask[state_test$date_since_mask < 0] = 0
state_test <- subset(state_test, select = -c(state, dataQualityGrade, fips, score))
state_test <- dplyr::rename(state_test, c(state_deaths = death))
state_test_names <- data.frame(column = names(state_test)[2:34])
state_test_names$source <- "state_test"
column_names <- rbind(column_names, state_test_names)
aggregate_chr_policy = merge(chr,state_test,by="State")
aggregate_pm_temp_covid_census_mortality_chr_policy = merge(aggregate_pm_temp_covid_census_mortality, aggregate_chr_policy, by.x = "fips", by.y = "FIPS")
#------------------------------------------------------------------------------------------------------------------------------------------
# Hospitals
hospitals = read.csv(text=getURL("https://opendata.arcgis.com/datasets/6ac5e325468c4cb9b905f1728d6fbf0f_0.csv?outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D"))
hospitals$BEDS[hospitals$BEDS < 0] = NA
county_hospitals_aggregated = hospitals %>%
group_by(COUNTYFIPS) %>%
dplyr::summarise(beds = sum(BEDS, na.rm=TRUE))
county_hospitals_aggregated$COUNTYFIPS = str_pad(county_hospitals_aggregated$COUNTYFIPS, 5, pad = "0")
county_hospitals_aggregated_names <- data.frame(column = names(county_hospitals_aggregated)[2:2])
county_hospitals_aggregated_names$source <- "county_hospitals_aggregated"
column_names <- rbind(column_names, county_hospitals_aggregated_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds = merge(aggregate_pm_temp_covid_census_mortality_chr_policy,county_hospitals_aggregated,by.x = "fips",by.y = "COUNTYFIPS",all.x = T)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds$beds[is.na(aggregate_pm_temp_covid_census_mortality_chr_policy_beds$beds)] = 0
#------------------------------------------------------------------------------------------------------------------------------------------
# Import outcome data from JHU CSSE, calculate the timing of the 1st confirmed case for each county
date_of_all = format(seq(as.Date("2020-03-22"), as.Date(strptime(date_of_study,"%m-%d-%Y")), by = "days"),"%m-%d-%Y")
covid_us_daily_confirmed = lapply(date_of_all,
function(date_of_all){
covid_daily = read.csv(text=getURL(paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/",date_of_all,".csv")))
covid_daily = covid_daily[!duplicated(covid_daily$FIPS),]
covid_daily = subset(covid_daily,Country_Region == "US" & is.na(FIPS)!=T & Confirmed >0)
covid_daily = subset(covid_daily,select=c(FIPS))
covid_daily$date_since = as.numeric(as.Date(strptime(date_of_study,"%m-%d-%Y")) - as.Date(strptime(date_of_all, "%m-%d-%Y")))
return(covid_daily)
}
)
covid_county_confirmed <- covid_us_daily_confirmed[[1]]
for (i in 1:length(date_of_all)){
covid_county_confirmed <- rbind.fill(covid_county_confirmed, subset(covid_us_daily_confirmed[[i]], (!(FIPS %in% covid_county_confirmed$FIPS))))
}
covid_county_confirmed$FIPS <- str_pad(covid_county_confirmed$FIPS, 5, pad = "0")
covid_county_confirmed_names <- data.frame(column = names(covid_county_confirmed)[2:2])
covid_county_confirmed_names$source <- "covid_county_confirmed"
column_names <- rbind(column_names, covid_county_confirmed_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds,covid_county_confirmed,
by.x = "fips",by.y = "FIPS", all.x = T)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first$date_since[is.na(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first$date_since)] = 0
#------------------------------------------------------------------------------------------------------------------------------------------
# CDC
cdc <- readRDS('MM_data/data/CDC/cdc.data.imputed.Rds')
cdc <- subset(cdc, period == '2015-2017')
cdc <- data.frame(split(cdc, cdc$death_cause))
cdc <- subset(cdc, select = c(All.Cause.county_fips,
All.Cause.death_rate,
Assault.death_rate,
Cancer.death_rate,
Cardiovascular.death_rate,
Despair.death_rate))
cdc <- dplyr::rename(cdc, c(FIPS = All.Cause.county_fips))
cdc_names <- data.frame(column = names(cdc)[2:6])
cdc_names$source <- "cdc"
column_names <- rbind(column_names, cdc_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first_cdc = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first,cdc,
by.x = "fips",by.y = "FIPS", all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# Lung Disease dataset
lungdisease <- read_csv("Data/lungdiseaseestimates_uscounties.csv")
lungdisease$PediatricAsthma         <- lungdisease$PediatricAsthma / lungdisease$TotalPopulation  * 10^5
lungdisease$AdultAsthma             <- lungdisease$AdultAsthma / lungdisease$TotalPopulation  * 10^5
lungdisease$COPD                    <- lungdisease$COPD / lungdisease$TotalPopulation  * 10^5
lungdisease$AdultChronicLungDisease <- lungdisease$AdultChronicLungDisease / lungdisease$TotalPopulation  * 10^5
lungdisease$LungCancer              <- lungdisease$LungCancer / lungdisease$TotalPopulation  * 10^5
lungdisease <- subset(lungdisease, select = -c(`State or County`, TotalPopulation))
lungdisease_names <- data.frame(column = names(lungdisease)[2:6])
lungdisease_names$source <- "lungdisease"
column_names <- rbind(column_names, lungdisease_names)
aggregate_data = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first_cdc, lungdisease,
by.x = "fips",by.y = "FIPS", all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# Import FB survey on covid-like sympton data
script <- getURL("https://raw.githubusercontent.com/cmu-delphi/delphi-epidata/main/src/client/delphi_epidata.R", ssl.verifypeer = FALSE)
eval(parse(text = script))
# Request FB survey data from CMU COVIDcast Delphi Research Group
aggregate_data$cli  =
sapply(aggregate_data$fips,
function(fips){
if (Epidata$covidcast('fb-survey', 'smoothed_cli', 'day', 'county', list(Epidata$range(20200401, paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))),fips)[[2]]!="no results"){
return(mean(sapply(Epidata$covidcast('fb-survey', 'smoothed_cli', 'day', 'county', list(Epidata$range(20200401, paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))),fips)[[2]],function(i){i$value}),na.rm=T))
}else {return(NA)}})
FB_names <- data.frame(column = c("cli"))
FB_names$source <- "FB"
column_names <- rbind(column_names, FB_names)
View(aggregate_data)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
source("./Modules/Source.R")
# Change the date here
date_of_study = "06-28-2020"
column_names <- data.frame()
#------------------------------------------------------------------------------------------------------------------------------------------
# Import exposure PM2.5 data
county_pm <- read.csv("./Data/county_pm25.csv")
county_pm$fips = str_pad(county_pm$fips, 5, pad = "0")
# pm2.5 average over 17 years
county_pm_aggregated <- county_pm %>%
filter(!is.na(pm25)) %>%
filter(!is.na(fips)) %>%
group_by(fips) %>%
dplyr::summarise(mean_pm25 = mean(pm25))
county_pm_aggregated_names <- data.frame(column = names(county_pm_aggregated)[2:2])
county_pm_aggregated_names$source <- "county_pm_aggregated"
column_names <- rbind(column_names, county_pm_aggregated_names)
# temperature and relative humidity average over 17 years
county_temp = read.csv("./Data/temp_seasonal_county.csv")
county_temp$fips = str_pad(county_temp$fips, 5, pad = "0")
county_temp_aggregated = county_temp %>%
group_by(fips) %>%
dplyr::summarise(mean_winter_temp= mean(winter_tmmx, na.rm=TRUE),
mean_summer_temp= mean(summer_tmmx, na.rm=TRUE),
mean_winter_rm= mean(winter_rmax, na.rm=TRUE),
mean_summer_rm= mean(summer_rmax, na.rm=TRUE))
county_temp_aggregated_names <- data.frame(column = names(county_temp_aggregated)[2:5])
county_temp_aggregated_names$source <- "county_temp_aggregated"
column_names <- rbind(column_names, county_temp_aggregated_names)
aggregate_pm_temp = merge(county_pm_aggregated,county_temp_aggregated,by="fips",all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# Historical data
covid_hist = read.csv(text=getURL(paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-30-2020.csv")))
covid_us_hist = subset(covid_hist, Country_Region == "US" & is.na(FIPS)==F)
#covid_us_hist = subset(covid_us_hist, select = -c(Country_Region, Last_Update, Combined_Key))
# Import outcome data from JHU CSSE
covid = read.csv(text=getURL(paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/",date_of_study,".csv")))
covid_us = subset(covid,Country_Region == "US")
covid_us <- rbind.fill(covid_us,subset(covid_us_hist, (!(FIPS %in% covid_us$FIPS))  & Confirmed == 0 & Deaths == 0 & is.na(FIPS)==F))
covid_us$FIPS = str_pad(covid_us$FIPS, 5, pad = "0")
covid_us = subset(covid_us, select = -c(Admin2, Province_State, Country_Region, Last_Update, Combined_Key))
covid_us_names <- data.frame(column = names(covid_us)[2:9])
covid_us_names$source <- "covid_us"
column_names <- rbind(column_names, covid_us_names)
aggregate_pm_temp_covid = merge(aggregate_pm_temp,covid_us,by.x="fips",by.y = "FIPS")
#------------------------------------------------------------------------------------------------------------------------------------------
# Import census
county_census <- read.csv(text=getURL("https://raw.githubusercontent.com/wxwx1993/PM_COVID/master/Data/census_county_interpolated.csv"))
county_census <- subset(county_census, select = -c(X))
county_census_aggregated = subset(county_census, year==2016)
county_census_aggregated <- county_census_aggregated[,c(1,3,4,5,8,10)]
county_census_aggregated$q_popdensity = 1
quantile_popdensity = quantile(county_census_aggregated$popdensity,c(0.2,0.4,0.6,0.8))
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity<=quantile_popdensity[1]] = 1
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity>quantile_popdensity[1] &
county_census_aggregated$popdensity<=quantile_popdensity[2]] = 2
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity>quantile_popdensity[2] &
county_census_aggregated$popdensity<=quantile_popdensity[3]] = 3
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity>quantile_popdensity[3] &
county_census_aggregated$popdensity<=quantile_popdensity[4]] = 4
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity>quantile_popdensity[4]] = 5
county_census_aggregated$fips = str_pad(county_census_aggregated$fips, 5, pad = "0")
county_census_aggregated_names <- data.frame(column = names(county_census_aggregated)[2:7])
county_census_aggregated_names$source <- "county_census_aggregated"
column_names <- rbind(column_names, county_census_aggregated_names)
aggregate_pm_temp_covid_census = merge(aggregate_pm_temp_covid,county_census_aggregated,by.x="fips",by.y = "fips")
#------------------------------------------------------------------------------------------------------------------------------------------
county_base_mortality = read.table("./Data/county_base_mortality.txt", header = TRUE)
county_old_mortality = read.table("./Data/county_old_mortality.txt", header = TRUE)
county_014_mortality = read.table("./Data/county_014_mortality.txt", header = TRUE)
county_1544_mortality = read.table("./Data/county_1544_mortality.txt", header = TRUE)
county_4564_mortality = read.table("./Data/county_4564_mortality.txt", header = TRUE)
# county base mortality (covid mortality?)
colnames(county_old_mortality)[4] = c("older_Population")
colnames(county_014_mortality)[4] = c("014_Population")
colnames(county_1544_mortality)[4] = c("1544_Population")
colnames(county_4564_mortality)[4] = c("4564_Population")
county_base_mortality = merge(county_base_mortality,county_old_mortality[,c(2,4)] ,by = "County.Code", all.x = T)
county_base_mortality = merge(county_base_mortality,county_014_mortality[,c(2,4)] ,by = "County.Code",all.x = T)
county_base_mortality = merge(county_base_mortality,county_1544_mortality[,c(2,4)] ,by = "County.Code",all.x = T)
county_base_mortality = merge(county_base_mortality,county_4564_mortality[,c(2,4)] ,by = "County.Code",all.x = T)
county_base_mortality$older_pecent = county_base_mortality$older_Population/county_base_mortality$Population
county_base_mortality$"young_pecent" = county_base_mortality$"014_Population"/county_base_mortality$Population
county_base_mortality$"prime_pecent" = county_base_mortality$"1544_Population"/county_base_mortality$Population
county_base_mortality$"mid_pecent" = county_base_mortality$"4564_Population"/county_base_mortality$Population
county_base_mortality$"older_pecent"[is.na(county_base_mortality$"older_pecent")] = 0
county_base_mortality$"prime_pecent"[is.na(county_base_mortality$"prime_pecent")] = 0
county_base_mortality$"mid_pecent"[is.na(county_base_mortality$"mid_pecent")] = 0
county_base_mortality$"young_pecent"[is.na(county_base_mortality$"young_pecent")] = 0
county_base_mortality$County.Code = str_pad(county_base_mortality$County.Code, 5, pad = "0")
county_base_mortality <- county_base_mortality[,c(1,12:15)]
county_base_mortality_names <- data.frame(column = names(county_base_mortality)[2:5])
county_base_mortality_names$source <- "county_base_mortality"
column_names <- rbind(column_names, county_base_mortality_names)
aggregate_pm_temp_covid_census_mortality = merge(aggregate_pm_temp_covid_census,county_base_mortality,by.x = "fips",by.y = "County.Code",all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# County Health Rankings Master dataset
chr <- read_csv("Data/2020CHR.csv")
chr <- chr[, -grep("Quartile", colnames(chr))]
chr <- chr[, -grep("95", colnames(chr))]
chr <- subset(chr, select = -c(Deaths, Unreliable))
chr <- dplyr::rename(chr, c("pct_diabetes" = `% Adults with Diabetes`,
"pct_obesity" = `% Adults with Obesity`,
"pct_age65" = `% 65 and over`,
"pre_covid_deaths" = `# Deaths`,
"pre_covid_death_rate" = `Age-Adjusted Death Rate`,
"child_deaths" = `# Deaths_1`,
"infant_deaths" = `# Deaths_2`,
"# less than 18 years of age" = `Population_1`,
"suicide_deaths"= `# Deaths_3`))
chr_names <- data.frame(column = names(chr)[2:236])
chr_names$source <- "chr"
column_names <- rbind(column_names, chr_names)
#------------------------------------------------------------------------------------------------------------------------------------------
# State test and policy
state_test = read.csv(text=getURL("https://covidtracking.com/api/v1/states/daily.csv"))
state_test = subset(state_test, date ==paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))[,-20]
state_test <- subset(state_test, select = -c(date, lastUpdateEt, dateModified, checkTimeEt, dateChecked, hash, grade))
state_test <- state_test[, -grep("Score", colnames(state_test))]
statecode = read_csv("./Data/statecode.csv")
# Import social distancing measure data
distancing <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1894978869")
colnames(distancing)[2] = "state"
colnames(distancing)[4] = "stay_at_home"
reopen <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1269444822')
colnames(reopen)[2] = "state"
colnames(reopen)[4] = "reopen"
closure <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=257109301')
colnames(closure)[2] = "state"
colnames(closure)[4] = "reclosure"
mask <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1489353670')
colnames(mask)[2] = "state"
colnames(mask)[4] = "mask"
# merging data
state_test = merge(state_test,statecode[,c(1,3)],by.x = "state" ,by.y = "Code" )
state_test = merge(state_test,distancing[,c(2,4)],by = "state")
state_test = merge(state_test,reopen[,c(2,4)],by = "state")
state_test = merge(state_test,closure[,c(2,4)],by = "state")
state_test = merge(state_test,mask[,c(2,4)],by = "state")
#state_test$date_since_social = as.numeric(as.Date(Sys.Date()) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test$date_since_social = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_social)==T,]$date_since_social = 0
state_test$date_since_social[state_test$date_since_social < 0] = 0
state_test$date_since_reopen = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reopen, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reopen)==T,]$date_since_reopen = 0
state_test$date_since_reopen[state_test$date_since_reopen < 0] = 0
state_test$date_since_reclosure = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reclosure, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reclosure)==T,]$date_since_reclosure = 0
state_test$date_since_reclosure[state_test$date_since_reclosure < 0] = 0
state_test$date_since_mask = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$mask, "%m/%d/%Y"))))
state_test$date_since_mask[is.na(state_test$date_since_mask)==T] = 0
state_test$date_since_mask[state_test$date_since_mask < 0] = 0
state_test <- subset(state_test, select = -c(state, dataQualityGrade, fips, score))
state_test <- dplyr::rename(state_test, c(state_deaths = death))
state_test_names <- data.frame(column = names(state_test)[2:34])
state_test_names$source <- "state_test"
column_names <- rbind(column_names, state_test_names)
aggregate_chr_policy = merge(chr,state_test,by="State")
aggregate_pm_temp_covid_census_mortality_chr_policy = merge(aggregate_pm_temp_covid_census_mortality, aggregate_chr_policy, by.x = "fips", by.y = "FIPS")
#------------------------------------------------------------------------------------------------------------------------------------------
# Hospitals
hospitals = read.csv(text=getURL("https://opendata.arcgis.com/datasets/6ac5e325468c4cb9b905f1728d6fbf0f_0.csv?outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D"))
hospitals$BEDS[hospitals$BEDS < 0] = NA
county_hospitals_aggregated = hospitals %>%
group_by(COUNTYFIPS) %>%
dplyr::summarise(beds = sum(BEDS, na.rm=TRUE))
county_hospitals_aggregated$COUNTYFIPS = str_pad(county_hospitals_aggregated$COUNTYFIPS, 5, pad = "0")
county_hospitals_aggregated_names <- data.frame(column = names(county_hospitals_aggregated)[2:2])
county_hospitals_aggregated_names$source <- "county_hospitals_aggregated"
column_names <- rbind(column_names, county_hospitals_aggregated_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds = merge(aggregate_pm_temp_covid_census_mortality_chr_policy,county_hospitals_aggregated,by.x = "fips",by.y = "COUNTYFIPS",all.x = T)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds$beds[is.na(aggregate_pm_temp_covid_census_mortality_chr_policy_beds$beds)] = 0
#------------------------------------------------------------------------------------------------------------------------------------------
# Import outcome data from JHU CSSE, calculate the timing of the 1st confirmed case for each county
date_of_all = format(seq(as.Date("2020-03-22"), as.Date(strptime(date_of_study,"%m-%d-%Y")), by = "days"),"%m-%d-%Y")
covid_us_daily_confirmed = lapply(date_of_all,
function(date_of_all){
covid_daily = read.csv(text=getURL(paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/",date_of_all,".csv")))
covid_daily = covid_daily[!duplicated(covid_daily$FIPS),]
covid_daily = subset(covid_daily,Country_Region == "US" & is.na(FIPS)!=T & Confirmed >0)
covid_daily = subset(covid_daily,select=c(FIPS))
covid_daily$date_since = as.numeric(as.Date(strptime(date_of_study,"%m-%d-%Y")) - as.Date(strptime(date_of_all, "%m-%d-%Y")))
return(covid_daily)
}
)
covid_county_confirmed <- covid_us_daily_confirmed[[1]]
for (i in 1:length(date_of_all)){
covid_county_confirmed <- rbind.fill(covid_county_confirmed, subset(covid_us_daily_confirmed[[i]], (!(FIPS %in% covid_county_confirmed$FIPS))))
}
covid_county_confirmed$FIPS <- str_pad(covid_county_confirmed$FIPS, 5, pad = "0")
covid_county_confirmed_names <- data.frame(column = names(covid_county_confirmed)[2:2])
covid_county_confirmed_names$source <- "covid_county_confirmed"
column_names <- rbind(column_names, covid_county_confirmed_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds,covid_county_confirmed,
by.x = "fips",by.y = "FIPS", all.x = T)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first$date_since[is.na(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first$date_since)] = 0
#------------------------------------------------------------------------------------------------------------------------------------------
# CDC
cdc <- readRDS('MM_data/data/CDC/cdc.data.imputed.Rds')
cdc <- subset(cdc, period == '2015-2017')
cdc <- data.frame(split(cdc, cdc$death_cause))
cdc <- subset(cdc, select = c(All.Cause.county_fips,
All.Cause.death_rate,
Assault.death_rate,
Cancer.death_rate,
Cardiovascular.death_rate,
Despair.death_rate))
cdc <- dplyr::rename(cdc, c(FIPS = All.Cause.county_fips))
cdc_names <- data.frame(column = names(cdc)[2:6])
cdc_names$source <- "cdc"
column_names <- rbind(column_names, cdc_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first_cdc = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first,cdc,
by.x = "fips",by.y = "FIPS", all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# Lung Disease dataset
lungdisease <- read_csv("Data/lungdiseaseestimates_uscounties.csv")
lungdisease$PediatricAsthma         <- lungdisease$PediatricAsthma / lungdisease$TotalPopulation  * 10^5
lungdisease$AdultAsthma             <- lungdisease$AdultAsthma / lungdisease$TotalPopulation  * 10^5
lungdisease$COPD                    <- lungdisease$COPD / lungdisease$TotalPopulation  * 10^5
lungdisease$AdultChronicLungDisease <- lungdisease$AdultChronicLungDisease / lungdisease$TotalPopulation  * 10^5
lungdisease$LungCancer              <- lungdisease$LungCancer / lungdisease$TotalPopulation  * 10^5
lungdisease <- subset(lungdisease, select = -c(`State or County`, TotalPopulation))
lungdisease_names <- data.frame(column = names(lungdisease)[2:6])
lungdisease_names$source <- "lungdisease"
column_names <- rbind(column_names, lungdisease_names)
aggregate_data = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first_cdc, lungdisease,
by.x = "fips",by.y = "FIPS", all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# Import FB survey on covid-like sympton data
script <- getURL("https://raw.githubusercontent.com/cmu-delphi/delphi-epidata/main/src/client/delphi_epidata.R", ssl.verifypeer = FALSE)
eval(parse(text = script))
# Request FB survey data from CMU COVIDcast Delphi Research Group
aggregate_data$cli  =
sapply(aggregate_data$fips,
function(fips){
if (Epidata$covidcast('fb-survey', 'smoothed_cli', 'day', 'county', list(Epidata$range(20200401, paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))),fips)[[2]]!="no results"){
return(mean(sapply(Epidata$covidcast('fb-survey', 'smoothed_cli', 'day', 'county', list(Epidata$range(20200401, paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))),fips)[[2]],function(i){i$value}),na.rm=T))
}else {return(NA)}})
FB_names <- data.frame(column = c("cli"))
FB_names$source <- "FB"
column_names <- rbind(column_names, FB_names)
#------------------------------------------------------------------------------------------------------------------------------------------
# Saving data frame to Rds file
file = paste("Preprocessing_FTS_Outputs/", date_of_study, "data.Rds",sep = "")
saveRDS(aggregate_data, file)
saveRDS(column_names, "Preprocessing/column_names.Rds")
View(aggregate_data)
View(column_names)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
source("./Modules/Source.R")
source("./GWAS/helper.R")
data <- readRDS("./Preprocessing_FTS_Outputs/06-28-2020data.Rds")
to_cluster <- subset(data, select = c(fips, Deaths))
to_cluster <- drop_na(to_cluster)
mort.cluster.raw <- cluster.counties(to_cluster, cluster.method="kmeans", cluster.num=4)
mort.avg.cluster.raw <- data %>%
dplyr::right_join(mort.cluster.raw, by = "fips") %>%
dplyr::group_by(cluster) %>%
dplyr::summarise(
death_rate = sum(Deaths) / sum(population) * 10^5,
count = n()
) %>%
dplyr::ungroup()
mort.cluster.map <- mort.avg.cluster.raw %>%
dplyr::arrange(death_rate) %>%
dplyr::mutate(ord = as.character(1:n())) %>%
dplyr::select(-c(death_rate)) %>%
textshape::column_to_rownames("cluster")
mort.cluster.ord <- order.county.clusters(mort.cluster.raw, mort.cluster.map)
mort.avg.cluster.ord <- dplyr::mutate(mort.avg.cluster.raw, cluster = mort.cluster.map[cluster, "ord"])
mort.rate <- data %>%
dplyr::select(fips, death_rate)
nums <- unlist(lapply(data, is.numeric))
numeric_data <- data[ , nums]
numeric_data$fips <- data$fips
kendall.cor <- mort.rate %>%
dplyr::mutate(VAR = death_rate) %>%
kendall.func(numeric_data) %>%
dplyr::mutate(
DIR = dplyr::if_else(
kendall_cor <= 0,
"Protective",
"Destructive"
)
#chr_code = chr.namemap.2019[chr_code, 1]
) %>% na.omit() %>%
dplyr::arrange(desc(kendall_cor)) %>%
dplyr::mutate(code = reorder(code, kendall_cor))
#using Benjamin Hochberg's p.adjust() method to adjust P-values for multiple hypothesis testing to filter out factors that are less relevant.
corrected_pvalues <- p.adjust(kendall.cor$kendall_p)
selected_SDs <- cbind(kendall.cor, Corrected_P_Vals = corrected_pvalues)
selected_SDs <- selected_SDs %>%
dplyr::filter(Corrected_P_Vals < 0.05) %>%
dplyr::arrange(desc(kendall_cor))
saveRDS(selected_SDs, "./GWAS/selected_SDs_1.Rds")
#Printing out the few selected factors for deaths of despair.
print(selected_SDs)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
source("./Modules/Source.R")
source("./GWAS/helper.R")
data <- readRDS("./Preprocessing_FTS_Outputs/06-28-2020data.Rds")
to_cluster <- subset(data, select = c(fips, Deaths))
to_cluster <- drop_na(to_cluster)
mort.cluster.raw <- cluster.counties(to_cluster, cluster.method="kmeans", cluster.num=4)
mort.avg.cluster.raw <- data %>%
dplyr::right_join(mort.cluster.raw, by = "fips") %>%
dplyr::group_by(cluster) %>%
dplyr::summarise(
death_rate = sum(Deaths) / sum(Population) * 10^5,
count = n()
) %>%
dplyr::ungroup()
mort.cluster.map <- mort.avg.cluster.raw %>%
dplyr::arrange(death_rate) %>%
dplyr::mutate(ord = as.character(1:n())) %>%
dplyr::select(-c(death_rate)) %>%
textshape::column_to_rownames("cluster")
mort.cluster.ord <- order.county.clusters(mort.cluster.raw, mort.cluster.map)
mort.avg.cluster.ord <- dplyr::mutate(mort.avg.cluster.raw, cluster = mort.cluster.map[cluster, "ord"])
mort.rate <- data %>%
dplyr::select(fips, death_rate)
nums <- unlist(lapply(data, is.numeric))
numeric_data <- data[ , nums]
numeric_data$fips <- data$fips
kendall.cor <- mort.rate %>%
dplyr::mutate(VAR = death_rate) %>%
kendall.func(numeric_data) %>%
dplyr::mutate(
DIR = dplyr::if_else(
kendall_cor <= 0,
"Protective",
"Destructive"
)
#chr_code = chr.namemap.2019[chr_code, 1]
) %>% na.omit() %>%
dplyr::arrange(desc(kendall_cor)) %>%
dplyr::mutate(code = reorder(code, kendall_cor))
#using Benjamin Hochberg's p.adjust() method to adjust P-values for multiple hypothesis testing to filter out factors that are less relevant.
corrected_pvalues <- p.adjust(kendall.cor$kendall_p)
selected_SDs <- cbind(kendall.cor, Corrected_P_Vals = corrected_pvalues)
selected_SDs <- selected_SDs %>%
dplyr::filter(Corrected_P_Vals < 0.05) %>%
dplyr::arrange(desc(kendall_cor))
saveRDS(selected_SDs, "./GWAS/selected_SDs_1.Rds")
#Printing out the few selected factors for deaths of despair.
print(selected_SDs)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
source("./Modules/Source.R")
source("./GWAS/helper.R")
data <- readRDS("./Preprocessing_FTS_Outputs/06-28-2020data.Rds")
to_cluster <- subset(data, select = c(fips, Deaths))
to_cluster <- drop_na(to_cluster)
mort.cluster.raw <- cluster.counties(to_cluster, cluster.method="kmeans", cluster.num=4)
mort.avg.cluster.raw <- data %>%
dplyr::right_join(mort.cluster.raw, by = "fips") %>%
dplyr::group_by(cluster) %>%
dplyr::summarise(
death_rate = sum(Deaths) / sum(Population) * 10^5,
count = n()
) %>%
dplyr::ungroup()
mort.cluster.map <- mort.avg.cluster.raw %>%
dplyr::arrange(death_rate) %>%
dplyr::mutate(ord = as.character(1:n())) %>%
#dplyr::select(-c(death_rate)) %>%
textshape::column_to_rownames("cluster")
mort.cluster.ord <- order.county.clusters(mort.cluster.raw, mort.cluster.map)
mort.avg.cluster.ord <- dplyr::mutate(mort.avg.cluster.raw, cluster = mort.cluster.map[cluster, "ord"])
mort.rate <- data %>%
dplyr::select(fips, death_rate)
nums <- unlist(lapply(data, is.numeric))
numeric_data <- data[ , nums]
numeric_data$fips <- data$fips
kendall.cor <- mort.rate %>%
dplyr::mutate(VAR = death_rate) %>%
kendall.func(numeric_data) %>%
dplyr::mutate(
DIR = dplyr::if_else(
kendall_cor <= 0,
"Protective",
"Destructive"
)
#chr_code = chr.namemap.2019[chr_code, 1]
) %>% na.omit() %>%
dplyr::arrange(desc(kendall_cor)) %>%
dplyr::mutate(code = reorder(code, kendall_cor))
#using Benjamin Hochberg's p.adjust() method to adjust P-values for multiple hypothesis testing to filter out factors that are less relevant.
corrected_pvalues <- p.adjust(kendall.cor$kendall_p)
selected_SDs <- cbind(kendall.cor, Corrected_P_Vals = corrected_pvalues)
selected_SDs <- selected_SDs %>%
dplyr::filter(Corrected_P_Vals < 0.05) %>%
dplyr::arrange(desc(kendall_cor))
saveRDS(selected_SDs, "./GWAS/selected_SDs_1.Rds")
#Printing out the few selected factors for deaths of despair.
print(selected_SDs)
View(mort.avg.cluster.raw)
